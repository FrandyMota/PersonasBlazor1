@page "/Moras"
@page "/Moras/{MorasId:int}"

@inject IToastService toast

@using BLL
@using Models


<EditForm Model="Mora" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <h3>Registro de Moras</h3>
        </div>

        <div class="card-body">
            <form>

                @*MoraId*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Mora ID</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Mora.MoraId" class="form-control" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Fecha*@
                <div class="form-group">
                    <label>Fecha</label>
                    <InputDate @bind-Value="Mora.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => Mora.Fecha)" />
                </div>

                @*Detalle*@
                <div class="form-row">

                    @*Prestamo*@

                    <div class="form-group col">
                        <label>Prestamo</label>
                        <select class="browser-default custom-select" @bind="Detalle.PrestamoId" @onclick="BuscarPersona">
                            <option value="" disabled>Seleccione una opcion</option>
                            @foreach (var item in ListaPrestamos)
                            {
                                <option value="@item.PrestamoId">@item.PrestamoId</option>
                            }
                        </select>
                    </div>

                    @*Persona*@
                    <div class="form-group col">
                        <label>Persona</label>
                        <InputText class="form-control" @bind-Value="Nombre" disabled />
                    </div>

                    @*Valor*@
                    <div class="form-group col">
                        <label>Valor</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="Detalle.Valor" class="form-control" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary" @onclick="AgregarMora"><i class="oi oi-plus" aria-hidden="true" /></button>
                            </div>
                            <ValidationMessage For="@(() => Detalle.Valor)" />
                        </div>
                    </div>
                </div>

                <table class="table">
                    <thead>
                        <tr>
                            <th>Prestamo ID</th>
                            <th>Valor</th>
                            <th>Opciones</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in Mora.MoraDetalle)
                        {
                            <tr>
                                <td>@item.PrestamoId</td>
                                <td>@item.Valor</td>
                                <td><button type="button" class="btn btn-outline-danger" @onclick="(() => RemoverFila(item))">Remover fila</button></td>
                            </tr>
                        }
                    </tbody>
                </table>

                @*Total*@
                <div class="form-group">
                    <label>Total</label>
                    <InputNumber @bind-Value="Mora.Total" class="form-control" disabled />
                </div>
            </form>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>

</EditForm>


@code {
    [Parameter]

    public int MorasId { get; set; }

    [Parameter]
    public int IDPrestamoSeleccionada { get; set; }


    private string Nombre { get; set; }
    private Moras Mora = new Moras();
    private MorasDetalle Detalle = new MorasDetalle();

    private List<Prestamos> ListaPrestamos { get; set; }

    protected override void OnInitialized()
    {

        Nuevo();

        Buscar();

        ListaPrestamos = BLL.PrestamosBLL.GetList();

    }


    public void Nuevo()
    {

        Nombre = string.Empty;

        Mora = new Moras();

        Detalle = new MorasDetalle();

        ListaPrestamos = BLL.PrestamosBLL.GetList();

    }


    private void Buscar()
    {

        if (Mora.MoraId > 0)
        {

            var encontrado = MorasBLL.Buscar(Mora.MoraId);

            if (encontrado != null)

                this.Mora = encontrado;

            else

                toast.ShowWarning("No encontrado");

        }

    }


    public void Guardar()
    {

        bool guardo;

        guardo = MorasBLL.Guardar(Mora);

        if (guardo)
        {

            Nuevo();

            toast.ShowSuccess("Guardado correctamente");

        }

        else

            toast.ShowError("No fue posible guardar");

    }

    public void Eliminar()
    {

        bool elimino;

        elimino = MorasBLL.Eliminar(Mora.MoraId);

        if (elimino)
        {

            Nuevo();

            toast.ShowSuccess("Eliminado correctamente");

        }

        else

            toast.ShowError("No fue posible eliminar");

    }

    public void BuscarPersona()
    {

        if (Detalle.PrestamoId != 0)
        {

            int id = PrestamosBLL.Buscar(Detalle.PrestamoId).PersonaId;

            Nombre = PersonasBLL.Buscar(id).Nombre;

        }

    }

    public void AgregarMora()
    {

        Mora.MoraDetalle.Add(new MorasDetalle

        {

            MoraId = Mora.MoraId,

            PrestamoId = Detalle.PrestamoId,

            Valor = Detalle.Valor

        });

        Mora.Total += Detalle.Valor;

    }

    public void RemoverFila(MorasDetalle FilaRemovida)
    {

        Mora.Total -= FilaRemovida.Valor;

        Mora.MoraDetalle.Remove(FilaRemovida);

    }
}
